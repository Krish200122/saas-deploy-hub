name: Deploy ERP SaaS

on:
  workflow_call:
    inputs:
      customer_name:
        required: true
        type: string
      application_name:
        required: true
        type: string
    secrets:
      EMAIL_USERNAME:
        required: true
      EMAIL_PASSWORD:
        required: true
      VPC_HOST:
        required: true
      VPS_USER:
        required: true
      VPS_PASSWORD:
        required: true
      DB_HOST:
        required: true
      DB_USER:
        required: true
      DB_PASS:
        required: true

jobs:
  deploy:
    name: 'App: ${{ inputs.application_name }} to: ${{ inputs.customer_name }}'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build and export Docker image(s)
        run: |
          APP_NAME="${{ inputs.application_name }}"
          IMAGE_TAG=$(echo "${{ inputs.customer_name }}" | tr -d ' ')
          
          # If it's a fullapp, extract prefix and build API
          if [[ "$APP_NAME" == *"_fullapp" ]]; then
            PREFIX=$(echo "$APP_NAME" | cut -d'_' -f1)
            API_APP_NAME="${PREFIX}_api"
            echo "API_APP_NAME=$API_APP_NAME" >> $GITHUB_ENV
            
            echo "üîß Building API image: $API_APP_NAME"
            docker build -t "${API_APP_NAME}:${IMAGE_TAG}" -f "./${API_APP_NAME}/Dockerfile" "./${API_APP_NAME}/src"
            docker save "${API_APP_NAME}:${IMAGE_TAG}" -o "${API_APP_NAME}.tar"
          fi

          echo "üîß Building App image: $APP_NAME"
          docker build -t "${APP_NAME}:${IMAGE_TAG}" -f "./${APP_NAME}/Dockerfile" "./${APP_NAME}/src"
          docker save "${APP_NAME}:${IMAGE_TAG}" -o "${APP_NAME}.tar"

      - name: Upload Docker images to VPS
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
          host: ${{ secrets.VPC_HOST }}
          user: ${{ secrets.VPS_USER }}
          pass: ${{ secrets.VPS_PASSWORD }}
          port: 22
          first_ssh: |
            mkdir -p /home/ApplicationContainer
          scp: |
            ./${{ inputs.application_name }}.tar => /home/ApplicationContainer/

      - name: Upload API image if fullapp
        if: contains(inputs.application_name, '_fullapp')
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
          host: ${{ secrets.VPC_HOST }}
          user: ${{ secrets.VPS_USER }}
          pass: ${{ secrets.VPS_PASSWORD }}
          port: 22
          scp: |
            ./${{ env.API_APP_NAME }}.tar => /home/ApplicationContainer/

      - name: Upload scripts to VPS
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
          host: ${{ secrets.VPC_HOST }}
          user: ${{ secrets.VPS_USER }}
          pass: ${{ secrets.VPS_PASSWORD }}
          port: 22
          scp: |
            ./Scripts/main.sh => /home/ApplicationContainer/
            ./Scripts/Modules/* => /home/ApplicationContainer/Modules/


      - name: Deploy FullApplication
        if: contains(inputs.application_name, '_fullapp')
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
          host: ${{ secrets.VPC_HOST }}
          user: ${{ secrets.VPS_USER }}
          pass: ${{ secrets.VPS_PASSWORD }}
          port: 22
          first_ssh: |
            export TERM=xterm
            cd /home/ApplicationContainer
            chmod +x main.sh
            chmod +x Modules/*.sh
            ./main.sh "${{ inputs.customer_name }}" "${{ env.API_APP_NAME }}" "${{ secrets.DB_HOST }}" "${{ secrets.DB_USER }}" "${{ secrets.DB_PASS }}"
            ./main.sh "${{ inputs.customer_name }}" "${{ inputs.application_name }}" "${{ secrets.DB_HOST }}" "${{ secrets.DB_USER }}" "${{ secrets.DB_PASS }}" true

      - name: Deploy main application
        if: ${{ !contains(inputs.application_name, '_fullapp') }}
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
          host: ${{ secrets.VPC_HOST }}
          user: ${{ secrets.VPS_USER }}
          pass: ${{ secrets.VPS_PASSWORD }}
          port: 22
          first_ssh: |
            export TERM=xterm
            cd /home/ApplicationContainer
            chmod +x main.sh
            ./main.sh "${{ inputs.customer_name }}" "${{ inputs.application_name }}" "${{ secrets.DB_HOST }}" "${{ secrets.DB_USER }}" "${{ secrets.DB_PASS }}"

      - name: Send Failure Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå Deployment Failed for ${{ inputs.customer_name }}"
          to: tarunkrish2001@gmail.com
          from: "Deployment Bot <${{ secrets.EMAIL_USERNAME }}>"
          body: |
            Hi Admin,

            Deployment for customer **${{ inputs.customer_name }}** and application **${{ inputs.application_name }}** has **failed**.

            Please investigate the logs in the GitHub Actions console for details.

            Regards,  
            üö® ERP Deployment System
